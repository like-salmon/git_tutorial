create remote repo and update automatically:(ref:http://toroid.org/git-website-howto)

1.create local repo:
cd directory
git init
2.cd .git and remove .sample suffix
3.go to local repo,git add *  ,then git commit -m "comment"
4.if exclude a directory,git reset -- somefolder_to_exclude

 从服务器克隆:
git clone username@host:/path/to/repository


remote server
$ mkdir website.git && cd website.git
$ git init --bare

$ cat > hooks/post-receive
#!/bin/sh
GIT_WORK_TREE=/var/www/www.example.org git checkout -f
$ chmod +x hooks/post-receive

then goto local repo:
添加远程仓库为web:
git remote add web ssh://simon@120.76.239.214/home/simon/website.git/


添加到web主分支:
git push web master


You can push to more than one remote repository by adding more URLs under the [remote "web"] section in your .git/config.
[remote "web"]
    url = ssh://server.example.org/home/ams/website.git
    url = ssh://other.example.org/home/foo/website.git



merge local and remote repo:
if you are talking about syncing a forked repo then you can follow these steps.
How to sync a fork repository from git
  1. check your current git branch
git branch
  2. checkout to master if you are not on master
git checkout master
  3. Fetch the upstream repository if you have correct access rights
git fetch zxgj
  4. If you are getting below error then run
git remote add upstream  git@github.com:upstream_clone_repo_url/xyz.git
fatal: 'upstream/master' does not appear to be a git repository
fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists.

  5. Now run the below command.
git fetch upstream
  6. Now if you are on master then merge the upstream/master into master branch
git merge upstream/master
That's it!!
Crosscheck via git remote command, more specific git remote -v
If I also have commit rights to the upstream repo, I can create a local upstream branch and do work that will go upstream there.

or in short:
git checkout master
git branch new-branch-to-save-current-commits  #back up
git fetch --all
git reset --hard origin/master   #resets master branch to what just fetched.

//git check what will be pushed
check diff details just use git diff
For a list of files to be pushed, run:
git diff --stat --cached [remote/branch]

example:
git diff --stat --cached origin/master

For the code diff of the files to be pushed, run:
git diff [remote repo/branch]

To see full file paths of the files that will change, run:
git diff --numstat [remote repo/branch]


git remove local tag and remote:
git tag -d TagName && git push origin :refs/tags/TagName

check what will commit:
git status

check push history(commit details):
git log

git tags:
create tag based on commit:
git tag -a v1.2 9fceb02 -m "Message here"
or:
git tag v1.0 ec32d32

show tag:
git show v1.4
 list all tags:
git tag
or specifically:git tag -l 'v1.4.2.*'
modified message in a tag:
git tag v1.0 -f -m "async added"
or:git tag -a v1.4 -m "my version 1.4"  #a means annotagted
push tag to server:
git push origin [tagname].
or:
git push --tags

git revert back to a specific tag:
git reset --hard "tag name"

then push to remote server:
git checkout master
git reset --hard tag_ABC
git push --force origin master
Please note that this will overwrite existing history in the upstream repo and may cause problems for other developers who have this repo checked out.

git ignore file/folder:


undo commit:
git reset HEAD~   #leaves the changes committed unstaged
or:
git reset --soft HEAD~ #add more changes to previous commit or change commit message,this leaves previous/existing changes staged.

store account & password:
git config --global credential.helper store
